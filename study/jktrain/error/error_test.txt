异常处理
1. Error vs Exception
    a. go使用error做异常的处理，争取在最早的地方可以处理掉异常；同时无法恢复的时候使用panic，如出现panic，建议抛弃本次处理过程
    b. go的异常实际上是字符串的指针，所以可以保证其一个异常类型的区分度
    c. go的error是一个带有ERROR()方法的interface
2. Error Type
    a. sentinel errors是设定出来被公共使用的errors
    b. 不要使用error.ERROR()值进行类型判断等处理，该方法的值为string，无法保证处理的有效性
    c. 在使用sentinel errors的时候，因为sentinel error肯定是全局的，所以会增加我们暴露的api表面积；而且会增加代码中对其它包的引用，会有依赖循环引用的问题
    d. 对于自定义类型(自己做一个struct type的error)，可以在其中隐藏更多的包装信息，比如出问题的行号，但和sentinel error一样，也会有过多暴露api和代码耦合循环引用的问题
    e. 隐藏类型的error，通过判断是否为空和提供断言获取内部的信息，并提供仅对外暴露的方法进行处理，减少了类型的导出，博主比较推荐
3. handling error
    a. 未解决根据上下文获得error信息的问题
    b. 可以根据优雅的处理代码和方法封装减少流程中对error进行处理的代码占比
    c. wrap error 提倡对每个error只处理一次，即要么打日志/解决，表示错误了解，要么，上抛。所以需要封装error，让最上层的处理者在处理error的时候能够拿到完整的上下文信息。同时，对error和日志内容要求，与错误无关且对调试没有帮助的信息应视为噪音，不予加入。 
    d. go在1.3开始尝试对error进行包装，但预计2.0才能较完善的集成，所以需使用第三方类库
    e. 使用第三方error包(目前无法下载？)通过wapper/withmessage来包装堆栈信息/错误附加信息，同时利用errors.cause配合输出%T%v%+v分别输出原始类型信息，提示信息和堆栈信息
    f. 自己业务代码中的可使用errors.New/errors.Errorf来处理自己的业务，这两个均基于pkg实现，带有错误堆栈信息；调用第三方或标准库的时候可以使用errors.wrap/errors.Wrapf来保存堆栈信息
    g. 建议直接返回错误，而非每层打日志，在程序顶部/工作goroutibe顶部，使用%+v记录error堆栈详细信息
    h. 由于包装两次会携带两遍堆栈信息，所以在写公共方法要用最基础的原型error，包装只在业务代码中进行使用
4. go 1.3以上新特性
    a. errors包增加了is和as方法用于解包装判断原始类型和进行类型转换
    b. fmt.Errorf向错误添加信息%v还是会消除原始类型，但使用%w的时候即是对错误进行拓展，会留存原始类型，可以使用errors.is/as进行拆包判断/转换
    