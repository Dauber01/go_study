go官方的拓展包 /x/time/rate 实现了令牌桶算法,令牌桶算法的最大的问题就是预值的设定
uber提供的漏桶算法, /go.uber.org/ratelimit

漏桶/令牌桶确实能保护系统不被拖垮,但阀值要设置的合理往往不容易
1. 集群增加机器/减少机器限制阀值是否要重新设置
2. 设置阀值的依据是什么
3. 人力运维成本是否过高
4. 当调用方反馈429时,这时候重新设置限流,其实流量高峰已经过了需要重新评估限流是否有意义
总体是采用漏斗/令牌桶的缺点,是太被动,不能快速适应流量变化

利特法法则: L=pw 其中p为速率, w为每人从等待到结束耗时

超时 -> 过载 -> 限流
1. 超时是为了控制整个服务的生命周期,保证其可以健康的运行
2. 过载是为了在整个负载过高的时候,通过抛弃掉过多的连接,保持自己的稳定性,但是当请求特别大的时候,拒绝的请求也是需要返回的,这样当基数变得特别大,仍然会崩

Max-Min Fairness(最大最小公平分享)算法,用来公平解决多个需求者等待分配有限的资源的情况