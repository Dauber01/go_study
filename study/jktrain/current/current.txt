在一个试验的getDir()函数中获取下面所有的文件和目录,如果返回值为chan的时候,可以不阻塞对应的方法,但是可能会有如下的问题:
1. 无法中断返回的数据,可以在获取到需要的文件信息之后就应该关闭,但由于无法控制通道,不能关闭对应的操作
2. 如果返回空的情况下,无法判定是没有数据,还是出现错误,返回值会带有二义性
filepath.walkDir()也是对应的实现方法,所以是否开启goroutine的主动权要交到调用它的程序中 

goroutine在创建和执行的过程中,可能会因为服务/主进程的退出,无法进行完完整的生命周期
所以要使用sync.waitinggroup进行追踪

log.Fatal() 
    可以直接结束该go进程, 方法内部会调用os.Exit(), 会忽略掉defer()函数的拦截, 直接进行无条件的终止
    所以在使用的时候要小心, 只建议在init()函数或者main()函数中主动进行调用

go为原子的操作只能限定为8字节,不能以自己以为的为原子操作,对于
type interfce struct{
    Type uintptr    //接口类型的字段
    Data uintptr    //接口数据的字段
}
模型相当于上面那样,所以interface的实际操作的时候,可能会出现类型和数据不统一的问题,见interface_atomic_test.go