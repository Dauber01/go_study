对api的管理可以依托于grpc内集成的自动生成服务工具,这个整个的文件即是对应的接口文档,这样在对应的文件和接口变更时会得到控制并实时有效的进行通知

通过github/gitlab来对api的变更和权限进行管理
1. API仓库,方便跨部门进行写作
2. 版本管理可以基于git进行控制
3. 规范化检查,可以利用git的工具集
4. API design review,变更diff
5. 权限管理,目录 owners,通过给每个目录加一个owners的文件,标明可以进行更改和审核的人,审核人在评论下评论特定内容,然后利用git的hook间隔性查看内容和权限进行合入

api规范
在项目中go的包名尽量为应用的标识(APP_ID),用于生成grpc请求路径,或者在proto之间进行引用Message,文件中声明的包名称应该与产品和服务名保持一致,带有版本的api的软件包名称必须以此版本结尾
RequestURl:
/<package_name>.<version>.<service_name>/{method}
package <package_name>.<version>

grpc对可选参数值的判定
    对于go来说,对于一个可选的参数值,如果该值是基础类型;当它的值为默认的0值时,我们没办法确定,他想传递的是0值,还是没有传递该参数
1. 在grpc2的版本中,google为每个值加了一个 has 开头的方法来判断是否有这个值,如果有的话,进行获取和处理
2. 在grpc3中,取消了v2版本中的 has 开头的方法,而是对每个基础类型的值进行包装,这样就可以通过判定包装类型的指针值是否nil来区分没传递和0值的区别